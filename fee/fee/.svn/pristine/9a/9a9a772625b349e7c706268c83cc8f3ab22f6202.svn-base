package com.chinagps.fee.controller;

import java.io.File;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import ldap.objectClasses.CommonCompany;
import ldap.oper.OpenLdap;
import ldap.oper.OpenLdapManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.chinagps.fee.comm.SystemConst;
import com.chinagps.fee.comm.SystemException;
import com.chinagps.fee.entity.po.Collection;
import com.chinagps.fee.entity.po.Servicepack;
import com.chinagps.fee.entity.vo.ItemVO;
import com.chinagps.fee.service.PaymentService;
import com.chinagps.fee.util.CreateExcel_PDF_CSV;
import com.chinagps.fee.util.FilesToZip;
import com.chinagps.fee.util.JsonUtil;
import com.chinagps.fee.util.LogOperation;
import com.chinagps.fee.util.PageSelect;
import com.chinagps.fee.util.StringUtils;
import com.chinagps.fee.util.Utils;
import com.chinagps.fee.util.WordPrint;
import com.chinagps.fee.util.page.Page;

/**
 * @Package:com.chinagps.fee.controller
 * @ClassName:PaytmentController
 * @Description:缴费控制器
 * @author:zfy
 * @date:2014-6-5 下午3:16:18
 */
@Controller
@RequestMapping(value = "/pay")
public class PaymentController extends BaseController{
	protected static final Logger LOGGER = LoggerFactory
			.getLogger(PaymentController.class);

	@Autowired
	@Qualifier("paymentService")
	private PaymentService paymentService;
	
	/**
	 * @Title:findLPayPrint4PrintSetPage
	 * @Description:查询发票打印设置
	 * @param pageSelect
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "findLPayPrint4PrintSetPage")
	public @ResponseBody
	Page<Map<String, Object>> findLPayPrint4PrintSetPage(@RequestBody PageSelect<Map<String, Object>> pageSelect,
			HttpServletRequest request) throws SystemException {
		Page<Map<String, Object>> results = null;
		try {
			if (pageSelect != null) {
				if (pageSelect.getFilter() == null) {
					pageSelect.setFilter(new HashMap());
				}
			}
				String userId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ID);
				String companyId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_COMPANYID);
				String orgId=(String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ORGID);
				if (StringUtils.isNotBlank(userId)) {
					OpenLdap openLdap = OpenLdapManager.getInstance();
					//判断是否是分公司
					int level=openLdap.getUserCompanyLevel(orgId);
					if(level==0){//总部
						
					}else if(level==1){//分公司
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}else if(level==2){//营业处
						pageSelect.getFilter().put("orgId", Long.valueOf(orgId));
					}
				}
				
			results = paymentService.findLPayPrint4PrintSetPage(pageSelect);

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			//throw new SystemException();
		}
		return results;
	}
	@RequestMapping(value = "updatePrintFreqByCustomerId")
	@LogOperation(description = "修改发票打印频率", op_type = SystemConst.OPERATELOG_UPDATE, model_id = 0)
	public @ResponseBody
	 HashMap<String, Object> updatePrintFreqByCustomerId(
			@RequestBody Collection collection,
			 HttpServletRequest request) {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		boolean flag = true;
		String msg = SystemConst.OP_SUCCESS;
		try {
			int result=paymentService.updatePrintFreqByCustomerId(collection);
			if(result==0){
				flag=false;
				msg="未设置成功，请先录入该客户的托收信息！";
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			flag = false;
			msg = SystemConst.OP_FAILURE;
			e.printStackTrace();
		}
		resultMap.put(SystemConst.SUCCESS, flag);
		resultMap.put(SystemConst.MSG, msg);
		return resultMap;
	}
	
	/**
	 * @Title:findPrintsPage
	 * @Description:发票打印处理 查询
	 * @param pageSelect
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "findPrintsPage")
	public @ResponseBody
	Page<Map<String, Object>> findPrintsPage(@RequestBody PageSelect<Map<String, Object>> pageSelect,
			HttpServletRequest request) throws SystemException {
		Page<Map<String, Object>> results = null;
		try {
			if(pageSelect==null){
				pageSelect=new PageSelect<Map<String,Object>>();
			}
			if (pageSelect != null) {
				if (pageSelect.getFilter() == null) {
					pageSelect.setFilter(new HashMap());
				}
			}
				String userId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ID);
				String companyId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_COMPANYID);
				String orgId=(String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ORGID);
				if (StringUtils.isNotBlank(userId)) {
					OpenLdap openLdap = OpenLdapManager.getInstance();
					//判断是否是分公司
					int level=openLdap.getUserCompanyLevel(orgId);
					if(level==0){//总部
						
					}else if(level==1){//分公司
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}else if(level==2){//营业处
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}
				}
			HttpSession session = request.getSession();	
			session.setAttribute("printFilterTmp", pageSelect.getFilter());
			results = paymentService.findPrintsPage(pageSelect);

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			//throw new SystemException();
		}
		return results;
	}
	
	/**
	 * @Title:addPrint
	 * @Description:发票打印处理 查询“打印本页”、“打印本页选中记录”等数据,并打印
	 * @param ids
	 * @param printType
	 * @param printFun 打印方法，1：word、2：网页
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "addPrint")
	@LogOperation(description = "发票打印", op_type = SystemConst.OPERATELOG_UPDATE, model_id = 30010)
	public @ResponseBody List<Map<String, Object>> addPrint(@RequestBody Map<String, Object> map,
			HttpServletRequest request,HttpServletResponse response) throws SystemException {
		List<Map<String, Object>> results = null;
		try {
				String userId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ID);
				String companyId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_COMPANYID);
				String orgId=(String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ORGID);
				Integer printType=1;
				Integer printFun=2;
				if(map!=null){
					printType=map.get("printType")==null?1:(Integer)map.get("printType");
					printFun=map.get("printFun")==null?1:(Integer)map.get("printFun");
				}
				if (StringUtils.isNotBlank(userId)) {
					OpenLdap openLdap = OpenLdapManager.getInstance();
					//判断是否是分公司
					int level=openLdap.getUserCompanyLevel(orgId);
					if(level==0){//总部
						
					}else if(level==1){//分公司
						map.put("subcoNo", Long.valueOf(companyId));
					}else if(level==2){//营业处
						map.put("subcoNo", Long.valueOf(companyId));
					}
				}
				//map.put("paymentIds", paymentIds);
				HttpSession session = request.getSession();	
				if(printType==1 || printType==2){//打印本页记录 1、打印本页选中的记录 2
					results = paymentService.findPrints2(map);
				}else if(printType==3){//清除选中记录打印标记 3
					paymentService.updatePrintNums(map,0);
				}else if(printType==4){//打印本次查询到的所有记录 4
					map=(Map<String, Object>) session.getAttribute("printFilterTmp");
					results = paymentService.findPrints2(map);
				}

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			//throw new SystemException();
		}
		return results;
	}
	
	/**
	 * @Title:findErrorPrintsPage
	 * @Description:发票打印异常 查询
	 * @param pageSelect
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "findErrorPrintsPage")
	public @ResponseBody
	Page<Map<String, Object>> findErrorPrintsPage(@RequestBody PageSelect<Map<String, Object>> pageSelect,
			HttpServletRequest request) throws SystemException {
		Page<Map<String, Object>> results = null;
		try {
			if(pageSelect==null){
				pageSelect=new PageSelect<Map<String,Object>>();
			}
			if (pageSelect != null) {
				if (pageSelect.getFilter() == null) {
					pageSelect.setFilter(new HashMap());
				}
			}
				String userId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ID);
				String companyId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_COMPANYID);
				String orgId=(String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ORGID);
				if (StringUtils.isNotBlank(userId)) {
					OpenLdap openLdap = OpenLdapManager.getInstance();
					//判断是否是分公司
					int level=openLdap.getUserCompanyLevel(orgId);
					if(level==0){//总部
						
					}else if(level==1){//分公司
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}else if(level==2){//营业处
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}
				}
			pageSelect.getFilter().put("printNum", 1);//打印次数大于0
			HttpSession session = request.getSession();	
			session.setAttribute("printFilterTmp", pageSelect.getFilter());
			results = paymentService.findPrintsPage(pageSelect);

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			//throw new SystemException();
		}
		return results;
	}
	
	@RequestMapping(value = "updatePrintNums")
	@LogOperation(description = "修改发票打印次数", op_type = SystemConst.OPERATELOG_UPDATE, model_id = 30010)
	public @ResponseBody
	 HashMap<String, Object> updatePrintNums(@RequestParam(value="paymentIds[]",required=false) List<Long> paymentIds,
			 HttpServletRequest request) {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		boolean flag = true;
		String msg = SystemConst.OP_SUCCESS;
		try {
			if(paymentIds==null){//清除本次查询到的所有记录
				HttpSession session = request.getSession();	
				Map<String,Object> map=(Map<String, Object>) session.getAttribute("printFilterTmp");
				paymentService.updatePrintNums(map,0);
			}else{
				paymentService.updatePrintNums(paymentIds);
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			flag = false;
			msg = SystemConst.OP_FAILURE;
			e.printStackTrace();
		}
		resultMap.put(SystemConst.SUCCESS, flag);
		resultMap.put(SystemConst.MSG, msg);
		return resultMap;
	}
	
	@RequestMapping(value = "updateDeliveryByIds")
	@LogOperation(description = "修改用户发票是否特殊投递", op_type = SystemConst.OPERATELOG_UPDATE, model_id = 0)
	public @ResponseBody HashMap<String, Object> updateDeliveryByIds(@RequestParam(value="collectionIds",required=false) List<Long> collectionIds,Integer isDelivery,
			HttpServletRequest request,HttpServletResponse response) throws SystemException {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		boolean flag = true;
		String msg = SystemConst.OP_SUCCESS;
		try {
			paymentService.updateDeliveryByIds(collectionIds, isDelivery);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			flag = false;
			msg = SystemConst.OP_FAILURE;
			e.printStackTrace();
		}
		resultMap.put(SystemConst.SUCCESS, flag);
		resultMap.put(SystemConst.MSG, msg);
		return resultMap;
	}
	
	/**
	 * @Title:findCollectionPage
	 * @Description:分页查询托收信息
	 * @param pageSelect
	 * @param bindingResult
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "findCollectionPage")
	public @ResponseBody
	Page<Collection> findCollectionPage(
			@RequestBody PageSelect<Collection> pageSelect,
			BindingResult bindingResult, HttpServletRequest request)
			throws SystemException {
		Page<Collection> results = null;
		try {
			String orgId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_ORGID);
			String companyId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_COMPANYID);
			if (pageSelect != null) {
				Map conditionMap = pageSelect.getFilter();
				if (conditionMap == null) {
					conditionMap = new HashMap();
				}
				conditionMap.put("subcoNo", companyId);
				//conditionMap.put("orgId", orgId);
			}
			results = paymentService.findCollectionPage(pageSelect);
			
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			throw new SystemException();
		}
		return results;
	} 
	
	/**
	 * @Title:findCollectionFees
	 * @Description:查询车台托收资料、收费信息
	 * @param map
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "findCollectionFees")
	public @ResponseBody
	Map<String, Object> findCollectionFees(@RequestBody Map<String, Object> map,
			HttpServletRequest request) throws SystemException {
		Map<String, Object> results = null;
		try {
			//外层Map：客户托收资料信息-》里层的vehiUnitList：每个车的车台的收费信息
			results = paymentService.findCollectionFees(map);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			//throw new SystemException();
		}
		return results;
	}
	
	/**
	 * @Title:findPaymentPage
	 * @Description:查询缴费记录
	 * @param pageSelect
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "findPaymentPage")
	public @ResponseBody
	Page<Map<String, Object>> findPaymentPage(@RequestBody PageSelect<Map<String, Object>> pageSelect,
			HttpServletRequest request) throws SystemException {
		Page<Map<String, Object>> results = null;
		try {
			if (pageSelect != null) {
				if (pageSelect.getFilter() == null) {
					pageSelect.setFilter(new HashMap());
				}
			}
				String userId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ID);
				String companyId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_COMPANYID);
				String orgId=(String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ORGID);
				if (StringUtils.isNotBlank(userId)) {
					OpenLdap openLdap = OpenLdapManager.getInstance();
					//判断是否是分公司
					int level=openLdap.getUserCompanyLevel(orgId);
					if(level==0){//总部
						
					}else if(level==1){//分公司
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}else if(level==2){//营业处
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}
				}
			results = paymentService.findPaymentPage(pageSelect);

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			//throw new SystemException();
		}
		return results;
	}
	/**
	 * @Title:findArrearageInfosPage
	 * @Description:分页查询欠费用户信息
	 * @param pageSelect
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "findArrearageInfosPage")
	public @ResponseBody
	Page<Map<String, Object>> findArrearageInfosPage(@RequestBody PageSelect<Map<String, Object>> pageSelect,
			HttpServletRequest request) throws SystemException {
		Page<Map<String, Object>> results = null;
		try {
			if (pageSelect != null) {
				if (pageSelect.getFilter() == null) {
					pageSelect.setFilter(new HashMap());
				}
			}
				String userId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ID);
				String companyId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_COMPANYID);
				String orgId=(String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ORGID);
				if (StringUtils.isNotBlank(userId)) {
					OpenLdap openLdap = OpenLdapManager.getInstance();
					//判断是否是分公司
					int level=openLdap.getUserCompanyLevel(orgId);
					if(level==0){//总部
						
					}else if(level==1){//分公司
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}else if(level==2){//营业处
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}
				}
			results = paymentService.findArrearageInfosPage(pageSelect);

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			//throw new SystemException();
		}
		return results;
	}
	
	@RequestMapping(value = "exportPayments")
	public void exportPayments(HttpServletRequest request,HttpServletResponse response) throws SystemException {
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("导出收费记录表 开始");
		}
		
		try {
			String[][] title = {{"序号","10"},{"客户名称","20"},{"车牌号码","14"},{"车载电话","14"},{"单据单号","16"},{"应收费总额(元)","18","1"},{"实收费用总额(元)","18","1"},{"应缴费明细(元)","20"},{"实际缴费明细(元)","100"},{"付费方式","14"},{"缴费时间","20"},{"操作时间","20"},{"发票打印次数","20"},{"发票打印时间","20"},{"备注","20"}};
			
			Map map=parseReqParam2(request);
			
			String companyId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_COMPANYID);
			String orgId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_ORGID);
			String userId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_ID);
			OpenLdap openLdap = OpenLdapManager.getInstance();
			if (StringUtils.isNotBlank(userId)) {
				//判断是否是分公司
				int level=openLdap.getUserCompanyLevel(orgId);
				if(level==0){//总部
					
				}else if(level==1){//分公司
					map.put("subcoNo", Long.valueOf(companyId));
				}else if(level==2){//营业处
					map.put("subcoNo", Long.valueOf(companyId));
				}
			}
			
			List<Map<String, Object>> results = paymentService.findAllPayment(map);
			List valueList = new ArrayList();
			Map<String, Object> valueData = null;
			String[] values = null;
			int listLenth=results.size();
			int titleLength=title.length;
			int columnIndex=0;
			for(int i=0; i<listLenth; i++){
				values = new String[titleLength];
				valueData = results.get(i);
				columnIndex=0;
				values[columnIndex]  = (i+1)+"";
				columnIndex++;
				values[columnIndex] = Utils.clearNull(valueData.get("customerName"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("plateNo"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("callLetter"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("bwNo"));
				columnIndex++;
				values[columnIndex] = Utils.clearNull(valueData.get("acAmount"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("realAmount"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("feetypes1"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("feetypes2")).replaceAll("<br/>", "；");
				columnIndex++;
				values[columnIndex]  =  Utils.clearNull(valueData.get("payModel"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("payTime"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("stamp"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("printNum"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("printTime"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("remark"));
				valueList.add(values);
			}
			//获得分公司中英文名称
			CommonCompany commonCompany =  openLdap.getCompanyById(companyId);
	
			CreateExcel_PDF_CSV.createExcel(valueList, response, "收费记录报表", title,commonCompany.getCnfullname(),commonCompany.getEnfullname(),true);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			e.printStackTrace();
		}
		
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("导出收费记录表 结束");
		}
	}
	
	@RequestMapping(value = "exportArrearageInfos")
	public void exportArrearageInfos(HttpServletRequest request,HttpServletResponse response) throws SystemException {
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("导出欠费用户记录表 开始");
		}
		
		try {
			String[][] title = {{"序号","10"},{"客户名称","20"},{"车牌号码","14"},{"车载电话","14"},{"联系电话","20"},{"销售经理","12"},{"安装日期","14"},{"付费方式","12"},{"汇总[欠费金额(元)]","120"}};
			
			//条件
			//Map returnMap =   request.getParameterMap();
			Map map=parseReqParam2(request);
			//将request.getParameterMap()转换成可操作的普通Map
			/*// 返回值Map
		    Map map = new HashMap();
		    Iterator entries =returnMap.entrySet().iterator();
		    Map.Entry entry = null;
		    String name = "";
		    String value = "";
		    while (entries.hasNext()) {
		        entry = (Map.Entry) entries.next();
		        name = (String) entry.getKey();
		        Object valueObj = entry.getValue();
		        if(null == valueObj){
		            value = "";
		        }else if(valueObj instanceof String[]){
		            String[] values = (String[])valueObj;
		            for(int i=0;i<values.length;i++){
		                value = values[i] + ",";
		            }
		            value = value.substring(0, value.length()-1);
		        }else{
		            value = valueObj.toString();
		        }
		        if("null".equals(value)){
		        	value="";
		        }
		        if(StringUtils.isNotBlank(name) && StringUtils.isNotBlank(value)){
		        	map.put(name, value);
		        }
		    }*/
			String companyId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_COMPANYID);
			String orgId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_ORGID);
			String userId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_ID);
			OpenLdap openLdap = OpenLdapManager.getInstance();
			if (StringUtils.isNotBlank(userId)) {
				//判断是否是分公司
				int level=openLdap.getUserCompanyLevel(orgId);
				if(level==0){//总部
					
				}else if(level==1){//分公司
					map.put("subcoNo", Long.valueOf(companyId));
				}else if(level==2){//营业处
					map.put("subcoNo", Long.valueOf(companyId));
				}
			}
			List<Map<String, Object>> results = paymentService.findAllArrearageInfos(map);
			List valueList = new ArrayList();
			Map<String, Object> valueData = null;
			String[] values = null;
			int listLenth=results.size();
			int titleLength=title.length;
			int columnIndex=0;
			
			List<String> totalMoneyList=null;
			for(int i=0; i<listLenth; i++){
				values = new String[titleLength];
				valueData = results.get(i);
				columnIndex=0;
				totalMoneyList=new ArrayList<String>();
				values[columnIndex]  = (i+1)+"";
				columnIndex++;
				values[columnIndex] = Utils.clearNull(valueData.get("customerName"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("plateNo"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("callLetter"))+" ";
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("phones"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("sales"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("fixTime"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("payModel"));
				columnIndex++;
				values[columnIndex]  = Utils.clearNull(valueData.get("feeItems"));
				valueList.add(values);
			}
			//获得分公司中英文名称
			CommonCompany commonCompany =  openLdap.getCompanyById(companyId);
	
			CreateExcel_PDF_CSV.createExcel(valueList, response, "欠费用户报表", title,commonCompany.getCnfullname(),commonCompany.getEnfullname(),false);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			e.printStackTrace();
		}
		
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("导出欠费用户记录表 结束");
		}
	}
	/**
	 * @Title:findPrintHistorysPage
	 * @Description:分页查询发票打印历史记录
	 * @param pageSelect
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "findPrintHistorysPage")
	public @ResponseBody
	Page<Map<String, Object>> findPrintHistorysPage(@RequestBody PageSelect<Map<String, Object>> pageSelect,
			HttpServletRequest request) throws SystemException {
		Page<Map<String, Object>> results = null;
		try {
			if (pageSelect != null) {
				if (pageSelect.getFilter() == null) {
					pageSelect.setFilter(new HashMap());
				}
			}
				String userId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ID);
				String companyId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_COMPANYID);
				String orgId=(String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ORGID);
				if (StringUtils.isNotBlank(userId)) {
					OpenLdap openLdap = OpenLdapManager.getInstance();
					//判断是否是分公司
					int level=openLdap.getUserCompanyLevel(orgId);
					if(level==0){//总部
						
					}else if(level==1){//分公司
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}else if(level==2){//营业处
						pageSelect.getFilter().put("subcoNo", Long.valueOf(companyId));
					}
				}
			results = paymentService.findPrintHistorysPage(pageSelect);

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印日志
			e.printStackTrace();
			// 同时把异常抛到前台
			//throw new SystemException();
		}
		return results;
	}
	@RequestMapping(value = "exportAndPrint")
	@LogOperation(description = "发票打印导出", op_type = SystemConst.OPERATELOG_UPDATE, model_id = 30010)
	public @ResponseBody void exportAndPrint(
			HttpServletRequest request,HttpServletResponse response) throws SystemException {
		List<Map<String, Object>> results = null;
		try {
				String userId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ID);
				String companyId = (String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_COMPANYID);
				String orgId=(String) request.getSession().getAttribute(
						SystemConst.ACCOUNT_ORGID);
				HttpSession session = request.getSession();	
				Map map=parseReqParam2(request);
				if (StringUtils.isNotBlank(userId)) {
					OpenLdap openLdap = OpenLdapManager.getInstance();
					//判断是否是分公司
					int level=openLdap.getUserCompanyLevel(orgId);
					if(level==0){//总部
						
					}else if(level==1){//分公司
						map.put("subcoNo", Long.valueOf(companyId));
					}else if(level==2){//营业处
						map.put("subcoNo", Long.valueOf(companyId));
					}
				}
				Integer printType=1;
				Integer printFun=2;
				if(map!=null){
					printType=map.get("printType")==null?1:Integer.valueOf(map.get("printType").toString());
					printFun=map.get("printFun")==null?1:Integer.valueOf(map.get("printFun").toString());
				}
				if(printType==1 || printType==2){//打印本页记录 1、打印本页选中的记录 2
					results = paymentService.findPrints2(map);
				}else if(printType==3){//清除选中记录打印标记 3
					paymentService.updatePrintNums(map,0);
				}else if(printType==4){//打印本次查询到的所有记录 4
					map=(Map<String, Object>) session.getAttribute("printFilterTmp");
					results = paymentService.findPrints2(map);
				}else if(printType==5){//导出Excel
					map=(Map<String, Object>) session.getAttribute("printFilterTmp");
					results = paymentService.findPrints2(map);
					String[] title = {"邮编", "地址", "收件人", "车载电话1", "用户名称",
	        				"银行名称", "扣款银行账号", "流水号", "打印日期", "项目",
	        				"金额", "扣款日期", "合计人民币(大写)", "(小写)", "计费时段始","计费时段终",
	        				"用户名", "车载电话2"};
	        		List<String[]> showList = new ArrayList<String[]>();
	        		int index;
	        		List<ItemVO> itemVOs;
	        		float money=0f;
	        		String[] row =new String[title.length];
	        		if(results!=null){
	        			for(Map<String, Object> info: results){ 
	        				index = 0;
	        				money=0f;
	        				row[index++] = Utils.clearNull(info.get("postCode"));
	        				row[index++] = Utils.clearNull(info.get("address"));
	        				row[index++] =  Utils.clearNull(info.get("addressee"));
	        				row[index++] =  Utils.clearNull(info.get("callLetter1"));
	        				row[index++] =  Utils.clearNull(info.get("customerName"));
	        				row[index++] =  Utils.clearNull(info.get("bank"));       			
	        				row[index++] =  Utils.clearNull(info.get("acNo")+" ");       			
	        				row[index++] =  Utils.clearNull(info.get("bwNo"));
	        				row[index++] =  Utils.clearNull(info.get("printDate"));
	        				//项目金额累加
	        				itemVOs=(List<ItemVO>) info.get("itemList");
	        				if(Utils.isNotNullOrEmpty(itemVOs)){
	        					for(ItemVO itemVO:itemVOs){
	        						money=(itemVO.getItemMoney()==null?0:itemVO.getItemMoney())+money;
	        					}
	        					row[index++] ="GPS信息费" ;
	        					row[index++] = money+"";
	        					row[index++] =itemVOs.get(0).getPayDate() ;
	        				}else{
	        					row[index++] = "";// Utils.clearNull(info.get("item01"));//项目1
	        					row[index++] = "";// Utils.clearNull(info.get("charg_sum"));//金额1
	        					row[index++] = "";// Utils.clearNull(info.get("paydate01")); //扣款日期  1   			
	        				}
	        				row[index++] =  Utils.clearNull(info.get("realAmountRMB"));
	        				row[index++] =  Utils.clearNull(info.get("realAmount"));    			
	        				row[index++] =  Utils.clearNull(info.get("sdate"));
	        				row[index++] =  Utils.clearNull(info.get("edate"));
	        				row[index++] =  Utils.clearNull(info.get("customerName"));
	        				row[index++] =  Utils.clearNull(info.get("callLetter"))+" ";
	        				showList.add(row);
	        				row=row.clone();
	        			}
	        		}
	        		
	        		CreateExcel_PDF_CSV.createExcel(showList, response, "发票打印", title);
	        		showList.clear();
	        		showList=null;
				}
				
				//如果需要打印word
				if(printFun==1 && (printType!=3)){
					//生成临时文件目录
					String tempDirectory=request.getSession().getServletContext().getRealPath("/");
					//E:\J2EE\workspace\fee\src\main\webapp
					tempDirectory=tempDirectory+"/tmp";
					OpenLdap openLdap = OpenLdapManager.getInstance();
					if(companyId!=null){
						CommonCompany commonCompany=openLdap.getCompanyById(companyId.toString());
						String companyNo=commonCompany.getCompanycode()==null?"":commonCompany.getCompanycode();
						if(StringUtils.isBlank(companyNo)){
							companyNo="0";
						}else {
							int length=companyNo.length();
							if(length>=2){
							   companyNo=companyNo.substring(length-2, length);
							}
						}
						tempDirectory=tempDirectory+"/tmp"+companyNo;
					}
					String wordFileName="feePrint";//word文件名
					File tempDirectoryFile = new File(tempDirectory);
					if(!tempDirectoryFile.exists()){
						tempDirectoryFile.mkdirs();
					}else{
						//删除目录下的所有文件
						FilesToZip.deleteDir(tempDirectoryFile);
						if(!tempDirectoryFile.exists()){
							tempDirectoryFile.mkdirs();
						}
					}
					WordPrint test = new WordPrint();
					if(Utils.isNotNullOrEmpty(results)){
						//一个word放置1000条需要打印的数据
						List<Map<String, Object>> dataList=null;
						int size=results.size();
						int maxSize=SystemConst.WORD_MAX_PAGE;
						if(size>maxSize){
							int freq=size/maxSize;
							int remainder=size%maxSize;//余数
							int i=0;
							for (i = 0; i < freq; i++) {
								dataList=results.subList(i*maxSize,((i*maxSize)+(maxSize)));
								//生成临时文件
								test.createWord4fee(tempDirectory, wordFileName+i, dataList);
							}
							if(remainder>0){
								dataList=results.subList(i*maxSize,maxSize*i+remainder);
								//生成临时文件
								test.createWord4fee(tempDirectory, wordFileName+i, dataList);
							}
						}else{
							dataList= results;
							//生成临时文件
							test.createWord4fee(tempDirectory, wordFileName, dataList);
						}
					}
					//将临时目录下的临时文件打成zip包，供客户端下载
					File[] fs = tempDirectoryFile.listFiles();
					FilesToZip.downLoadFiles(tempDirectory+"/fee.zip", fs, request, response);
					//容器不能同时用out字符流输出，outStream字节流输出，所以用字符流下载压缩文件时，return null 阻止字节流的输出
					//下载完后删除临时文件夹
					/*if(tempDirectoryFile.exists()){
						FilesToZip.deleteDir(tempDirectoryFile);
					}*/
				}
					
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

